/* tslint:disable */
/* eslint-disable */
/**
 * vektor
 * Vektor API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios'

import { BASE_PATH, BaseAPI, RequestArgs } from '../base'
import {
  assertParamExists,
  createRequestFunction,
  DUMMY_BASE_URL,
  setBearerAuthToObject,
  setSearchParams,
  toPathString,
} from '../common'
import { Configuration } from '../configuration'
import { Alert } from '../models'

/**
 * AlertsApi - axios parameter creator
 * @export
 */
export const AlertsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Cancel a single alert
     * @summary Cancel alert
     * @param {string} id Alert ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('_delete', 'id', id)
      const localVarPath = `/alerts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Cancel all alerts
     * @summary Cancel all alerts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/alerts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Show details for a single alert
     * @summary Show an alert\'s properties
     * @param {string} id Alert ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('get', 'id', id)
      const localVarPath = `/alerts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Lists all user\'s alerts
     * @summary List alerts
     * @param {boolean} [includeTriggered] Whether to include already triggered alerts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list: async (includeTriggered?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/alerts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (includeTriggered !== undefined) {
        localVarQueryParameter['include_triggered'] = includeTriggered
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AlertsApi - functional programming interface
 * @export
 */
export const AlertsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AlertsApiAxiosParamCreator(configuration)
  return {
    /**
     * Cancel a single alert
     * @summary Cancel alert
     * @param {string} id Alert ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Cancel all alerts
     * @summary Cancel all alerts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAll(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Show details for a single alert
     * @summary Show an alert\'s properties
     * @param {string} id Alert ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async get(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alert>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.get(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Lists all user\'s alerts
     * @summary List alerts
     * @param {boolean} [includeTriggered] Whether to include already triggered alerts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async list(
      includeTriggered?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Alert>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.list(includeTriggered, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * AlertsApi - factory interface
 * @export
 */
export const AlertsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AlertsApiFp(configuration)
  return {
    /**
     * Cancel a single alert
     * @summary Cancel alert
     * @param {string} id Alert ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp._delete(id, options).then((request) => request(axios, basePath))
    },
    /**
     * Cancel all alerts
     * @summary Cancel all alerts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAll(options?: any): AxiosPromise<void> {
      return localVarFp.deleteAll(options).then((request) => request(axios, basePath))
    },
    /**
     * Show details for a single alert
     * @summary Show an alert\'s properties
     * @param {string} id Alert ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(id: string, options?: any): AxiosPromise<Alert> {
      return localVarFp.get(id, options).then((request) => request(axios, basePath))
    },
    /**
     * Lists all user\'s alerts
     * @summary List alerts
     * @param {boolean} [includeTriggered] Whether to include already triggered alerts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list(includeTriggered?: boolean, options?: any): AxiosPromise<Array<Alert>> {
      return localVarFp.list(includeTriggered, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * AlertsApi - object-oriented interface
 * @export
 * @class AlertsApi
 * @extends {BaseAPI}
 */
export class AlertsApi extends BaseAPI {
  /**
   * Cancel a single alert
   * @summary Cancel alert
   * @param {string} id Alert ID
   // eslint-disable-next-line max-lines
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlertsApi
   */
  public _delete(id: string, options?: AxiosRequestConfig) {
    return AlertsApiFp(this.configuration)
      ._delete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Cancel all alerts
   * @summary Cancel all alerts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlertsApi
   */
  public deleteAll(options?: AxiosRequestConfig) {
    return AlertsApiFp(this.configuration)
      .deleteAll(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Show details for a single alert
   * @summary Show an alert\'s properties
   * @param {string} id Alert ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlertsApi
   */
  public get(id: string, options?: AxiosRequestConfig) {
    return AlertsApiFp(this.configuration)
      .get(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Lists all user\'s alerts
   * @summary List alerts
   * @param {boolean} [includeTriggered] Whether to include already triggered alerts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlertsApi
   */
  public list(includeTriggered?: boolean, options?: AxiosRequestConfig) {
    return AlertsApiFp(this.configuration)
      .list(includeTriggered, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
