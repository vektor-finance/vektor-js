/* tslint:disable */
/* eslint-disable */
/**
 * vektor
 * Vektor API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios'

import { BASE_PATH, BaseAPI, RequestArgs } from '../base'
import {
  createRequestFunction,
  DUMMY_BASE_URL,
  setBearerAuthToObject,
  setSearchParams,
  toPathString,
} from '../common'
import { Configuration } from '../configuration'
import { NetworkID, NetworkMode } from '../models'
/**
 * BlockchainsApi - axios parameter creator
 * @export
 */
export const BlockchainsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * List all supported blockchain:network pairs for an authenticated user
     * @summary List supported blockchain:network pairs
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list: async (networkMode?: NetworkMode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/blockchains`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (networkMode !== undefined) {
        localVarQueryParameter['network_mode'] = networkMode
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * List all supported blockchain symbols for an authenticated user
     * @summary List supported blockchain symbols
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    symbols: async (networkMode?: NetworkMode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/blockchains/symbols`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (networkMode !== undefined) {
        localVarQueryParameter['network_mode'] = networkMode
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * BlockchainsApi - functional programming interface
 * @export
 */
export const BlockchainsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BlockchainsApiAxiosParamCreator(configuration)
  return {
    /**
     * List all supported blockchain:network pairs for an authenticated user
     * @summary List supported blockchain:network pairs
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async list(
      networkMode?: NetworkMode,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NetworkID>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.list(networkMode, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * List all supported blockchain symbols for an authenticated user
     * @summary List supported blockchain symbols
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async symbols(
      networkMode?: NetworkMode,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.symbols(networkMode, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * BlockchainsApi - factory interface
 * @export
 */
export const BlockchainsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = BlockchainsApiFp(configuration)
  return {
    /**
     * List all supported blockchain:network pairs for an authenticated user
     * @summary List supported blockchain:network pairs
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list(networkMode?: NetworkMode, options?: any): AxiosPromise<Array<NetworkID>> {
      return localVarFp.list(networkMode, options).then((request) => request(axios, basePath))
    },
    /**
     * List all supported blockchain symbols for an authenticated user
     * @summary List supported blockchain symbols
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    symbols(networkMode?: NetworkMode, options?: any): AxiosPromise<Array<string>> {
      return localVarFp.symbols(networkMode, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * BlockchainsApi - object-oriented interface
 * @export
 * @class BlockchainsApi
 * @extends {BaseAPI}
 */
export class BlockchainsApi extends BaseAPI {
  /**
   * List all supported blockchain:network pairs for an authenticated user
   * @summary List supported blockchain:network pairs
   * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlockchainsApi
   */
  public list(networkMode?: NetworkMode, options?: AxiosRequestConfig) {
    return BlockchainsApiFp(this.configuration)
      .list(networkMode, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * List all supported blockchain symbols for an authenticated user
   * @summary List supported blockchain symbols
   * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlockchainsApi
   */
  public symbols(networkMode?: NetworkMode, options?: AxiosRequestConfig) {
    return BlockchainsApiFp(this.configuration)
      .symbols(networkMode, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
