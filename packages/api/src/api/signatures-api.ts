/* tslint:disable */
/* eslint-disable */
/**
 * vektor
 * Vektor API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios'

import { BASE_PATH, BaseAPI, RequestArgs } from '../base'
import {
  assertParamExists,
  createRequestFunction,
  DUMMY_BASE_URL,
  serializeDataIfNeeded,
  setBearerAuthToObject,
  setSearchParams,
  toPathString,
} from '../common'
import { Configuration } from '../configuration'
import { SignatureOrTransactionHash } from '../models'
/**
 * SignaturesApi - axios parameter creator
 * @export
 */
export const SignaturesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Submits signatures for a signing request
     * @summary Submits signatures
     * @param {string} signatureId Signature ID
     * @param {Array<SignatureOrTransactionHash>} signatureOrTransactionHash Signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submit: async (
      signatureId: string,
      signatureOrTransactionHash: Array<SignatureOrTransactionHash>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'signatureId' is not null or undefined
      assertParamExists('submit', 'signatureId', signatureId)
      // verify required parameter 'signatureOrTransactionHash' is not null or undefined
      assertParamExists('submit', 'signatureOrTransactionHash', signatureOrTransactionHash)
      const localVarPath = `/signatures/submit/{signature_id}`.replace(
        `{${'signature_id'}}`,
        encodeURIComponent(String(signatureId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        signatureOrTransactionHash,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SignaturesApi - functional programming interface
 * @export
 */
export const SignaturesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SignaturesApiAxiosParamCreator(configuration)
  return {
    /**
     * Submits signatures for a signing request
     * @summary Submits signatures
     * @param {string} signatureId Signature ID
     * @param {Array<SignatureOrTransactionHash>} signatureOrTransactionHash Signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async submit(
      signatureId: string,
      signatureOrTransactionHash: Array<SignatureOrTransactionHash>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.submit(signatureId, signatureOrTransactionHash, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * SignaturesApi - factory interface
 * @export
 */
export const SignaturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = SignaturesApiFp(configuration)
  return {
    /**
     * Submits signatures for a signing request
     * @summary Submits signatures
     * @param {string} signatureId Signature ID
     * @param {Array<SignatureOrTransactionHash>} signatureOrTransactionHash Signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submit(
      signatureId: string,
      signatureOrTransactionHash: Array<SignatureOrTransactionHash>,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .submit(signatureId, signatureOrTransactionHash, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * SignaturesApi - object-oriented interface
 * @export
 * @class SignaturesApi
 * @extends {BaseAPI}
 */
export class SignaturesApi extends BaseAPI {
  /**
   * Submits signatures for a signing request
   * @summary Submits signatures
   * @param {string} signatureId Signature ID
   * @param {Array<SignatureOrTransactionHash>} signatureOrTransactionHash Signature
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignaturesApi
   */
  public submit(
    signatureId: string,
    signatureOrTransactionHash: Array<SignatureOrTransactionHash>,
    options?: AxiosRequestConfig,
  ) {
    return SignaturesApiFp(this.configuration)
      .submit(signatureId, signatureOrTransactionHash, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
