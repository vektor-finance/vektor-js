/* tslint:disable */
/* eslint-disable */
/**
 * vektor
 * Vektor API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios'

import { BASE_PATH, BaseAPI, RequestArgs } from '../base'
import { createRequestFunction, DUMMY_BASE_URL, setBearerAuthToObject, setSearchParams, toPathString } from '../common'
import { Configuration } from '../configuration'
import { Asset } from '../models'
import { NetworkMode } from '../models'
/**
 * AssetsApi - axios parameter creator
 * @export
 */
export const AssetsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * List all supported assets for an authenticated user
     * @summary List supported assets
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list: async (networkMode?: NetworkMode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/assets`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (networkMode !== undefined) {
        localVarQueryParameter['network_mode'] = networkMode
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * List all supported asset symbols for an authenticated user
     * @summary List supported assets
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    symbol: async (networkMode?: NetworkMode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/assets/symbols`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (networkMode !== undefined) {
        localVarQueryParameter['network_mode'] = networkMode
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AssetsApi - functional programming interface
 * @export
 */
export const AssetsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AssetsApiAxiosParamCreator(configuration)
  return {
    /**
     * List all supported assets for an authenticated user
     * @summary List supported assets
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async list(
      networkMode?: NetworkMode,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Asset>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.list(networkMode, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * List all supported asset symbols for an authenticated user
     * @summary List supported assets
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async symbol(
      networkMode?: NetworkMode,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.symbol(networkMode, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * AssetsApi - factory interface
 * @export
 */
export const AssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AssetsApiFp(configuration)
  return {
    /**
     * List all supported assets for an authenticated user
     * @summary List supported assets
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list(networkMode?: NetworkMode, options?: any): AxiosPromise<Array<Asset>> {
      return localVarFp.list(networkMode, options).then((request) => request(axios, basePath))
    },
    /**
     * List all supported asset symbols for an authenticated user
     * @summary List supported assets
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    symbol(networkMode?: NetworkMode, options?: any): AxiosPromise<Array<string>> {
      return localVarFp.symbol(networkMode, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export class AssetsApi extends BaseAPI {
  /**
   * List all supported assets for an authenticated user
   * @summary List supported assets
   * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetsApi
   */
  public list(networkMode?: NetworkMode, options?: AxiosRequestConfig) {
    return AssetsApiFp(this.configuration)
      .list(networkMode, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * List all supported asset symbols for an authenticated user
   * @summary List supported assets
   * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetsApi
   */
  public symbol(networkMode?: NetworkMode, options?: AxiosRequestConfig) {
    return AssetsApiFp(this.configuration)
      .symbol(networkMode, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
