/* tslint:disable */
/* eslint-disable */
/**
 * vektor
 * Vektor API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { createRequestFunction, DUMMY_BASE_URL, setBearerAuthToObject, setSearchParams, toPathString } from '../common'
import { FunctionSpec } from '../models'
import { BaseAPI, BASE_PATH, RequestArgs } from '../base'
/**
 * FunctionsApi - axios parameter creator
 * @export
 */
export const FunctionsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * List all supported functions for an authenticated user
     * @summary List supported functions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/functions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * FunctionsApi - functional programming interface
 * @export
 */
export const FunctionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FunctionsApiAxiosParamCreator(configuration)
  return {
    /**
     * List all supported functions for an authenticated user
     * @summary List supported functions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async list(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FunctionSpec>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.list(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * FunctionsApi - factory interface
 * @export
 */
export const FunctionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = FunctionsApiFp(configuration)
  return {
    /**
     * List all supported functions for an authenticated user
     * @summary List supported functions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list(options?: any): AxiosPromise<Array<FunctionSpec>> {
      return localVarFp.list(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * FunctionsApi - object-oriented interface
 * @export
 * @class FunctionsApi
 * @extends {BaseAPI}
 */
export class FunctionsApi extends BaseAPI {
  /**
   * List all supported functions for an authenticated user
   * @summary List supported functions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FunctionsApi
   */
  public list(options?: AxiosRequestConfig) {
    return FunctionsApiFp(this.configuration)
      .list(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
