/* tslint:disable */
/* eslint-disable */
/**
 * vektor
 * Vektor API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { Label } from '../models'
// @ts-ignore
import { LabelCreateRequest } from '../models'
// @ts-ignore
import { LabelResponse } from '../models'
// @ts-ignore
import { LabelUpdateRequest } from '../models'
// @ts-ignore
import { NetworkMode } from '../models'
/**
 * LabelsApi - axios parameter creator
 * @export
 */
export const LabelsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Delete a label by ID for an authenticated user
     * @summary Delete label
     * @param {string} id Label ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('_delete', 'id', id)
      const localVarPath = `/labels/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Create a label for an authenticated user
     * @summary Create label
     * @param {LabelCreateRequest} labelCreateRequest Label attributes to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (labelCreateRequest: LabelCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'labelCreateRequest' is not null or undefined
      assertParamExists('create', 'labelCreateRequest', labelCreateRequest)
      const localVarPath = `/labels`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(labelCreateRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Show details for a Label by ID for an authenticated user
     * @summary Show label
     * @param {string} id Label ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('get', 'id', id)
      const localVarPath = `/labels/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * List all labels for an authenticated user
     * @summary List labels
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list: async (networkMode?: NetworkMode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/labels`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (networkMode !== undefined) {
        localVarQueryParameter['network_mode'] = networkMode
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Update a label by ID for an authenticated user
     * @summary Update label
     * @param {string} id Label ID
     * @param {LabelUpdateRequest} labelUpdateRequest Label attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: async (
      id: string,
      labelUpdateRequest: LabelUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('update', 'id', id)
      // verify required parameter 'labelUpdateRequest' is not null or undefined
      assertParamExists('update', 'labelUpdateRequest', labelUpdateRequest)
      const localVarPath = `/labels/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(labelUpdateRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Update a label by ID for an authenticated user
     * @summary Update label
     * @param {string} id Label ID
     * @param {LabelUpdateRequest} labelUpdateRequest Label attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update2: async (
      id: string,
      labelUpdateRequest: LabelUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('update2', 'id', id)
      // verify required parameter 'labelUpdateRequest' is not null or undefined
      assertParamExists('update2', 'labelUpdateRequest', labelUpdateRequest)
      const localVarPath = `/labels/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(labelUpdateRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * LabelsApi - functional programming interface
 * @export
 */
export const LabelsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LabelsApiAxiosParamCreator(configuration)
  return {
    /**
     * Delete a label by ID for an authenticated user
     * @summary Delete label
     * @param {string} id Label ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Create a label for an authenticated user
     * @summary Create label
     * @param {LabelCreateRequest} labelCreateRequest Label attributes to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      labelCreateRequest: LabelCreateRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(labelCreateRequest, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Show details for a Label by ID for an authenticated user
     * @summary Show label
     * @param {string} id Label ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async get(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.get(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * List all labels for an authenticated user
     * @summary List labels
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async list(
      networkMode?: NetworkMode,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Label>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.list(networkMode, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Update a label by ID for an authenticated user
     * @summary Update label
     * @param {string} id Label ID
     * @param {LabelUpdateRequest} labelUpdateRequest Label attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async update(
      id: string,
      labelUpdateRequest: LabelUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, labelUpdateRequest, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Update a label by ID for an authenticated user
     * @summary Update label
     * @param {string} id Label ID
     * @param {LabelUpdateRequest} labelUpdateRequest Label attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async update2(
      id: string,
      labelUpdateRequest: LabelUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.update2(id, labelUpdateRequest, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * LabelsApi - factory interface
 * @export
 */
export const LabelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = LabelsApiFp(configuration)
  return {
    /**
     * Delete a label by ID for an authenticated user
     * @summary Delete label
     * @param {string} id Label ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp._delete(id, options).then((request) => request(axios, basePath))
    },
    /**
     * Create a label for an authenticated user
     * @summary Create label
     * @param {LabelCreateRequest} labelCreateRequest Label attributes to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(labelCreateRequest: LabelCreateRequest, options?: any): AxiosPromise<LabelResponse> {
      return localVarFp.create(labelCreateRequest, options).then((request) => request(axios, basePath))
    },
    /**
     * Show details for a Label by ID for an authenticated user
     * @summary Show label
     * @param {string} id Label ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(id: string, options?: any): AxiosPromise<LabelResponse> {
      return localVarFp.get(id, options).then((request) => request(axios, basePath))
    },
    /**
     * List all labels for an authenticated user
     * @summary List labels
     * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list(networkMode?: NetworkMode, options?: any): AxiosPromise<Array<Label>> {
      return localVarFp.list(networkMode, options).then((request) => request(axios, basePath))
    },
    /**
     * Update a label by ID for an authenticated user
     * @summary Update label
     * @param {string} id Label ID
     * @param {LabelUpdateRequest} labelUpdateRequest Label attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(id: string, labelUpdateRequest: LabelUpdateRequest, options?: any): AxiosPromise<LabelResponse> {
      return localVarFp.update(id, labelUpdateRequest, options).then((request) => request(axios, basePath))
    },
    /**
     * Update a label by ID for an authenticated user
     * @summary Update label
     * @param {string} id Label ID
     * @param {LabelUpdateRequest} labelUpdateRequest Label attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update2(id: string, labelUpdateRequest: LabelUpdateRequest, options?: any): AxiosPromise<LabelResponse> {
      return localVarFp.update2(id, labelUpdateRequest, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * LabelsApi - object-oriented interface
 * @export
 * @class LabelsApi
 * @extends {BaseAPI}
 */
export class LabelsApi extends BaseAPI {
  /**
   * Delete a label by ID for an authenticated user
   * @summary Delete label
   * @param {string} id Label ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LabelsApi
   */
  public _delete(id: string, options?: AxiosRequestConfig) {
    return LabelsApiFp(this.configuration)
      ._delete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Create a label for an authenticated user
   * @summary Create label
   * @param {LabelCreateRequest} labelCreateRequest Label attributes to create
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LabelsApi
   */
  public create(labelCreateRequest: LabelCreateRequest, options?: AxiosRequestConfig) {
    return LabelsApiFp(this.configuration)
      .create(labelCreateRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Show details for a Label by ID for an authenticated user
   * @summary Show label
   * @param {string} id Label ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LabelsApi
   */
  public get(id: string, options?: AxiosRequestConfig) {
    return LabelsApiFp(this.configuration)
      .get(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * List all labels for an authenticated user
   * @summary List labels
   * @param {NetworkMode} [networkMode] Network mode. Default value is mainnet.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LabelsApi
   */
  public list(networkMode?: NetworkMode, options?: AxiosRequestConfig) {
    return LabelsApiFp(this.configuration)
      .list(networkMode, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Update a label by ID for an authenticated user
   * @summary Update label
   * @param {string} id Label ID
   * @param {LabelUpdateRequest} labelUpdateRequest Label attributes to update
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LabelsApi
   */
  public update(id: string, labelUpdateRequest: LabelUpdateRequest, options?: AxiosRequestConfig) {
    return LabelsApiFp(this.configuration)
      .update(id, labelUpdateRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Update a label by ID for an authenticated user
   * @summary Update label
   * @param {string} id Label ID
   * @param {LabelUpdateRequest} labelUpdateRequest Label attributes to update
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LabelsApi
   */
  public update2(id: string, labelUpdateRequest: LabelUpdateRequest, options?: AxiosRequestConfig) {
    return LabelsApiFp(this.configuration)
      .update2(id, labelUpdateRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
