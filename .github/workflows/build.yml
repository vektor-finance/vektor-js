name: build

on:
  pull_request:

env:
  CACHED_DEPENDENCY_PATHS: |
    ${{ github.workspace }}/node_modules
    ${{ github.workspace }}/packages/**/node_modules

  # DEPENDENCY_CACHE_KEY: can't be set here because we don't have access to yarn.lock

  CACHED_BUILD_PATHS: |
    ${{ github.workspace }}/packages/**/build
    ${{ github.workspace }}/packages/**/dist
    ${{ github.workspace }}/packages/**/esm

  BUILD_CACHE_KEY: ${{ github.sha }}

  # Read only token for fetching packages in other repos
  NODE_AUTH_TOKEN: ${{ secrets.GH_PKG_AUTH_TOKEN }}

jobs:
  install_deps:
    name: Install Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout current commit (${{ github.sha }})
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
          always-auth: true
          registry-url: https://npm.pkg.github.com
          scope: '@vektor-finance'

      # we use a hash of yarn.lock as our cache key, because if it hasn't changed, our dependencies haven't changed,
      # so no need to reinstall them
      - name: Compute dependency cache key
        id: compute_lockfile_hash
        run: echo "::set-output name=hash::${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}"

      - name: Check dependency cache
        uses: actions/cache@v2
        id: cache_dependencies
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ steps.compute_lockfile_hash.outputs.hash }}

      - name: Install dependencies
        if: steps.cache_dependencies.outputs.cache-hit == ''
        run: yarn install --frozen-lockfile

    outputs:
      dependency_cache_key: ${{ steps.compute_lockfile_hash.outputs.hash }}

  build:
    name: Build
    needs: install_deps
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
          always-auth: true
          registry-url: https://npm.pkg.github.com
          scope: '@vektor-finance'

      - name: Check dependency cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.install_deps.outputs.dependency_cache_key }}

      - name: Check build cache
        uses: actions/cache@v2
        id: cache_built_packages
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}

      - name: Build packages
        # Under normal circumstances, using the git SHA as a cache key, there shouldn't ever be a cache hit on the built
        # packages, and so `yarn build` should always run. This `if` check is therefore only there for testing CI issues
        # where the built packages are beside the point. In that case, you can change `BUILD_CACHE_KEY` (at the top of
        # this file) to a constant and skip rebuilding all of the packages each time CI runs.
        if: steps.cache_built_packages.outputs.cache-hit == ''
        run: yarn build
    outputs:
      # this needs to be passed on, because the `needs` context only looks at direct ancestors (so steps which depend on
      # `build` can't see `install_deps` and what it returned)
      dependency_cache_key: ${{ needs.install_deps.outputs.dependency_cache_key }}

  lint:
    name: Lint
    needs: build
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'

      - name: Check dependency cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.build.outputs.dependency_cache_key }}

      - name: Check build cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}

      - name: Run linter
        run: yarn lint

  circular_dep_check:
    name: Circular Dependency Check
    needs: build
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v2
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
      - name: Check dependency cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.build.outputs.dependency_cache_key }}
      - name: Check build cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}
      - name: Run madge
        run: yarn circularDepCheck

  test:
    name: Test (Node ${{ matrix.node }})
    needs: build
    continue-on-error: true
    timeout-minutes: 30
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [10, 12, 14, 16, 17]
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          always-auth: true
          registry-url: https://npm.pkg.github.com
          scope: '@vektor-finance'

      - name: Check dependency cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.build.outputs.dependency_cache_key }}

      - name: Check build cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}

      - name: Run tests
        env:
          NODE_VERSION: ${{ matrix.node }}
        run: yarn test

      - name: Compute test coverage
        uses: codecov/codecov-action@v1
